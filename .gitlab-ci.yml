stages:
  - build
  - test
  - deploy

variables:
  SOLUTION_FILE: "test_API.sln"
  API_PROJECT: "test_API/test_API.csproj"
  TEST_PROJECT: "Test/Test.csproj"
  PUBLISH_OUTPUT_DIR: "publish-output"
  ASPNETCORE_ENVIRONMENT: "Production"
  ASPNETCORE_URLS: "http://*:5245"

  # Переменные базы данных
  POSTGRES_DB: "base"
  POSTGRES_USER: "postgres"
  POSTGRES_PASSWORD: "12309"
  CONNECTION_STRING: "Host=192.168.56.1;Port=5432;Database=base;Username=postgres;Password=12309"  

# Этап 1: Сборка
build:
  stage: build
  image: mcr.microsoft.com/dotnet/sdk:8.0
  script:
    - export PATH="$PATH:$HOME/.dotnet/tools"
    # Сборка и публикация
    - dotnet restore $SOLUTION_FILE
    - dotnet build $SOLUTION_FILE --configuration Release --no-restore
    - dotnet publish $API_PROJECT --configuration Release --no-build --output $PUBLISH_OUTPUT_DIR

# Этап 2: Тестирование
test:
  stage: test
  image: mcr.microsoft.com/dotnet/sdk:8.0
  dependencies:
    - build
  script:
    - dotnet tool install -g trx2junit
    - export PATH="$PATH:$HOME/.dotnet/tools"
    # Запуск тестов
    - dotnet test $TEST_PROJECT --configuration Release --no-build

# Этап 3: Деплой
deploy:
  stage: deploy
  image: mcr.microsoft.com/dotnet/sdk:8.0  # Используем SDK для деплоя и миграций
  services:
    - name: postgres:latest
      alias: postgres
      variables:
        POSTGRES_DB: $POSTGRES_DB
        POSTGRES_USER: $POSTGRES_USER
        POSTGRES_PASSWORD: $POSTGRES_PASSWORD
  script:
    # Установка необходимых инструментов
    - apt-get update
    - apt-get install -y postgresql-client  # Устанавливаем клиента PostgreSQL
    - dotnet tool install --global dotnet-ef
    - export PATH="$PATH:$HOME/.dotnet/tools"

    # Ожидаем, пока база данных станет доступной
    - timeout 30s bash -c 'until pg_isready -h 192.168.56.1 -U postgres; do sleep 1; done' 

    # Миграция БД
    - dotnet ef database update --project $API_PROJECT --connection "$CONNECTION_STRING" || echo "Migrations not configured"
